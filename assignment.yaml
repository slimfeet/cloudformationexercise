AWSTemplateFormatVersion: '2010-09-09'
Description: 'Stack for creating a VPC and related resources'
# Create a VPC with DNS support and a single subnet in each AZ
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: 'AssignmentVPC'
# Create an Internet Gateway for the VPC
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'AssignmentIGW'
# Attach the IGW to the VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
# Create a public subnet in the current AZ
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'AssignmentPublicSubnet1'
# Create a second public subnet in a different AZ
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'AssignmentPublicSubnet2'
# Create a public route table for the VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'AssignmentPublicRouteTable'
# Create a public route to the internet
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
# Associate the first public subnet with the route table
  PublicSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
# Associate the second public subnet with the route table
  PublicSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
# Create the EC2 Instance Security Group
  SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'AssignmentSG'
      GroupDescription: 'Allow RDP access'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: 'AssignmentSG'
# Create the ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'ALBSecurityGroup'
      GroupDescription: 'Allow HTTP access'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: 'ALBSecurityGroup'
# Create the ALB
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: 'AssignmentALB'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: 'AssignmentALB'
      Type: application
# Create the ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup
                Weight: 1
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
  # Create the Target Group for the ALB    
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: 'AssignmentTargetGroup'
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
  # Create a Launch Template for the EC2 instances    
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-07cc1bbe145f35b58
        InstanceType: t2.micro
        IamInstanceProfile: 
          Name: !Ref EC2InstanceProfile
        KeyName: 'skillec2'
        SecurityGroupIds:
          - !Ref SG
        UserData: !Base64 |
          <powershell>
            Add-WindowsFeature -IncludeAllSubFeatures -Name Web-Server
          </powershell>
      LaunchTemplateName: 'AssignmentLaunchTemplate'
  # Create an S3 Bucket
  S3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'skillsynces3'
  # Create an IAM Role for EC2 instances
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole    
  # Attach S3 Access Policy to the EC2 Role
  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: 'S3AccessPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
              - s3:Put*
            Resource: '*'
      Roles:
        - !Ref EC2Role
  # Create an Instance Profile for EC2 to assume the EC2 Role
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: 'AssignmentEC2InstanceProfile'
      Roles:
        - !Ref EC2Role
  # Create an Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: 'AssignmentAutoScalingGroup'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: '1'
      AvailabilityZones:
        - !Select [ 0, !GetAZs '']
        - !Select [ 1, !GetAZs '']
      MaxSize: '3'
      MinSize: '1'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: 'AssignmentAutoScalingGroup'
          PropagateAtLaunch: true
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50
      AutoScalingGroupName: !Ref AutoScalingGroup

  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 20
      AutoScalingGroupName: !Ref AutoScalingGroup

Outputs:
    ALBDNSName:
        Description: The DNSName of the Application Load Balancer
        Value: !GetAtt ALB.DNSName
    
    AutoScalingGroupName:
        Description: The name of the Auto Scaling Group
        Value: !Ref AutoScalingGroup
    
    s3BucketName:
        Description: The name of the S3 Bucket
        Value: !Ref S3

    LaunchTemplateId:
        Description: The ID of the Launch Template
        Value: !Ref LaunchTemplate

    ALBTargetGroupARN:
        Description: The ARN of the ALB Target Group
        Value: !Ref TargetGroup
